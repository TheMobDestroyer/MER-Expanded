get_all_non_claimed_territory_from_hungary = {
	every_state = {
		limit = {
			is_owned_by = HUN
			NOT = { is_core_of = HUN }
			has_state_flag = HUN_is_claimed_by_HUN
		}
		transfer_state = PREV
	}
}

clear_hungarian_president_flags = {
	clr_country_flag = HUN_daranyi_president
	clr_country_flag = HUN_imredy_president
	clr_country_flag = HUN_teleki_president
	clr_country_flag = HUN_bethlen_president
	clr_country_flag = HUN_bardossy_president
	clr_country_flag = HUN_kallay_president
	clr_country_flag = HUN_president_kept	
}

clear_horthy_inheritance = {
	clr_country_flag = HUN_istvan_horthy_successor
	clr_country_flag = HUN_istvan_horthy_jr_successor
	clr_country_flag = HUN_victor_emmanuel_successor
	clr_country_flag = HUN_wilhelm_hohenzollern_successor
	clr_country_flag = HUN_otto_habsburg_successor
}

disable_elections_for_current_governing_party = {
	if = {
		limit = { has_government = neutrality }
		set_politics = {
			ruling_party = neutrality
			elections_allowed = no
		}
	}
	if = {
		limit = { has_government = democratic }
		set_politics = {
			ruling_party = democratic
			elections_allowed = no
		}
	}
	if = {
		limit = { has_government = communism }
		set_politics = {
			ruling_party = communism
			elections_allowed = no
		}
	}
	if = {
		limit = { has_government = fascism }
		set_politics = {
			ruling_party = fascism
			elections_allowed = no
		}
	}
}

clear_regional_election_flags = {
	clr_country_flag = HUN_election_AUS_conservatives
	clr_country_flag = HUN_election_AUS_socialists
	clr_country_flag = HUN_election_AUS_independence
	clr_country_flag = HUN_election_AUS_liberals
	
	clr_country_flag = HUN_election_HUN_conservatives
	clr_country_flag = HUN_election_HUN_socialists
	clr_country_flag = HUN_election_HUN_independence
	clr_country_flag = HUN_election_HUN_liberals
	
	clr_country_flag = HUN_election_SLO_conservatives
	clr_country_flag = HUN_election_SLO_socialists
	clr_country_flag = HUN_election_SLO_independence
	clr_country_flag = HUN_election_SLO_liberals
	
	clr_country_flag = HUN_election_BOH_conservatives
	clr_country_flag = HUN_election_BOH_socialists
	clr_country_flag = HUN_election_BOH_independence
	clr_country_flag = HUN_election_BOH_liberals
	
	clr_country_flag = HUN_election_GAL_conservatives
	clr_country_flag = HUN_election_GAL_socialists
	clr_country_flag = HUN_election_GAL_independence
	clr_country_flag = HUN_election_GAL_liberals
	
	clr_country_flag = HUN_election_TRA_conservatives
	clr_country_flag = HUN_election_TRA_socialists
	clr_country_flag = HUN_election_TRA_independence
	clr_country_flag = HUN_election_TRA_liberals
	
	clr_country_flag = HUN_election_CRO_conservatives
	clr_country_flag = HUN_election_CRO_socialists
	clr_country_flag = HUN_election_CRO_independence
	clr_country_flag = HUN_election_CRO_liberals
	
	clr_country_flag = HUN_election_CAR_conservatives
	clr_country_flag = HUN_election_CAR_socialists
	clr_country_flag = HUN_election_CAR_independence
	clr_country_flag = HUN_election_CAR_liberals
}

print_regional_election_results = {
	if = { limit = { has_country_flag = HUN_election_AUS_conservatives } 	custom_effect_tooltip = HUN_AUS_conservative_party }
	if = { limit = { has_country_flag = HUN_election_AUS_socialists } 		custom_effect_tooltip = HUN_AUS_socialist_party }
	if = { limit = { has_country_flag = HUN_election_AUS_independence } 	custom_effect_tooltip = HUN_AUS_independence_party }
	if = { limit = { has_country_flag = HUN_election_AUS_liberals } 		custom_effect_tooltip = HUN_AUS_liberal_party }
	custom_effect_tooltip = HUN_result_in_AUS		#has won in Austria
	
	if = { limit = { has_country_flag = HUN_election_HUN_conservatives } 	custom_effect_tooltip = HUN_HUN_conservative_party }
	if = { limit = { has_country_flag = HUN_election_HUN_socialists } 		custom_effect_tooltip = HUN_HUN_socialist_party }
	if = { limit = { has_country_flag = HUN_election_HUN_independence } 	custom_effect_tooltip = HUN_HUN_independence_party }
	if = { limit = { has_country_flag = HUN_election_HUN_liberals } 		custom_effect_tooltip = HUN_HUN_liberal_party }
	custom_effect_tooltip = HUN_result_in_HUN		#has won in Hungary
	
	if = {
		limit = { has_country_flag = HUN_slovakia_is_state }
		if = { limit = { has_country_flag = HUN_election_SLO_conservatives } 	custom_effect_tooltip = HUN_SLO_conservative_party }
		if = { limit = { has_country_flag = HUN_election_SLO_socialists } 		custom_effect_tooltip = HUN_SLO_socialist_party }
		if = { limit = { has_country_flag = HUN_election_SLO_independence } 	custom_effect_tooltip = HUN_SLO_independence_party }
		if = { limit = { has_country_flag = HUN_election_SLO_liberals } 		custom_effect_tooltip = HUN_SLO_liberal_party }
		custom_effect_tooltip = HUN_result_in_SLO		#has won in Slovakia
	}

	if = {
		limit = { has_country_flag = HUN_bohemia_moravia_is_state }	
		if = { limit = { has_country_flag = HUN_election_BOH_conservatives } 	custom_effect_tooltip = HUN_BOH_conservative_party }
		if = { limit = { has_country_flag = HUN_election_BOH_socialists } 		custom_effect_tooltip = HUN_BOH_socialist_party }
		if = { limit = { has_country_flag = HUN_election_BOH_independence } 	custom_effect_tooltip = HUN_BOH_independence_party }
		if = { limit = { has_country_flag = HUN_election_BOH_liberals } 		custom_effect_tooltip = HUN_BOH_liberal_party }
		custom_effect_tooltip = HUN_result_in_BOH		#has won in Bohemia-Moravia
	}

	if = {
		limit = { has_country_flag = HUN_galicia_lodomeria_is_state }	
		if = { limit = { has_country_flag = HUN_election_GAL_conservatives } 	custom_effect_tooltip = HUN_GAL_conservative_party }
		if = { limit = { has_country_flag = HUN_election_GAL_socialists } 		custom_effect_tooltip = HUN_GAL_socialist_party }
		if = { limit = { has_country_flag = HUN_election_GAL_independence } 	custom_effect_tooltip = HUN_GAL_independence_party }
		if = { limit = { has_country_flag = HUN_election_GAL_liberals } 		custom_effect_tooltip = HUN_GAL_liberal_party }
		custom_effect_tooltip = HUN_result_in_GAL		#has won in Galicia-Lodomeria
	}

	if = {
		limit = { has_country_flag = HUN_transylvania_is_state }	
		if = { limit = { has_country_flag = HUN_election_TRA_conservatives } 	custom_effect_tooltip = HUN_TRA_conservative_party }
		if = { limit = { has_country_flag = HUN_election_TRA_socialists } 		custom_effect_tooltip = HUN_TRA_socialist_party }
		if = { limit = { has_country_flag = HUN_election_TRA_independence } 	custom_effect_tooltip = HUN_TRA_independence_party }
		if = { limit = { has_country_flag = HUN_election_TRA_liberals } 		custom_effect_tooltip = HUN_TRA_liberal_party }
		custom_effect_tooltip = HUN_result_in_TRA		#has won in Transylvania
	}

	if = {
		limit = { has_country_flag = HUN_croatia_bosnia_is_state }	
		if = { limit = { has_country_flag = HUN_election_CRO_conservatives } 	custom_effect_tooltip = HUN_CRO_conservative_party }
		if = { limit = { has_country_flag = HUN_election_CRO_socialists } 		custom_effect_tooltip = HUN_CRO_socialist_party }
		if = { limit = { has_country_flag = HUN_election_CRO_independence } 	custom_effect_tooltip = HUN_CRO_independence_party }
		if = { limit = { has_country_flag = HUN_election_CRO_liberals } 		custom_effect_tooltip = HUN_CRO_liberal_party }
		custom_effect_tooltip = HUN_result_in_CRO		#has won in Croatia-Bosnia
	}

	if = {
		limit = { has_country_flag = HUN_carinthia_venetia_is_state }	
		if = { limit = { has_country_flag = HUN_election_CAR_conservatives } 	custom_effect_tooltip = HUN_CAR_conservative_party }
		if = { limit = { has_country_flag = HUN_election_CAR_socialists } 		custom_effect_tooltip = HUN_CAR_socialist_party }
		if = { limit = { has_country_flag = HUN_election_CAR_independence } 	custom_effect_tooltip = HUN_CAR_independence_party }
		if = { limit = { has_country_flag = HUN_election_CAR_liberals } 		custom_effect_tooltip = HUN_CAR_liberal_party }
		custom_effect_tooltip = HUN_result_in_CAR		#has won in Carinthia-Venetia
	}
}

resolve_regional_election_results = {
	
	HUN = { set_variable = { HUN_representation_conservative = 0 } }
	HUN = { set_variable = { HUN_representation_socialist = 0 } }
	HUN = { set_variable = { HUN_representation_independence = 0 } }
	HUN = { set_variable = { HUN_representation_liberal = 0 } }
	HUN = { set_variable = { HUN_dominance_threshold = HUN_total_states } }
	divide_variable = { var = HUN_dominance_threshold value = 2 }
	
	
	#Austria
	if = {
		limit = { has_country_flag = HUN_election_AUS_conservatives } 
		add_popularity = { ideology = neutrality popularity = 0.02 }
		add_to_variable = { var = HUN_representation_conservative value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_AUS_socialists } 
		add_popularity = { ideology = communism popularity = 0.02 }
		add_to_variable = { var = HUN_representation_socialist value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_AUS_independence }
		add_to_variable = { var = HUN_representation_independence value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_AUS_liberals } 
		add_popularity = { ideology = democratic popularity = 0.02 }
		add_to_variable = { var = HUN_representation_liberal value = 1 }
	}
	
	#Hungary-Slovakia
	if = {
		limit = { has_country_flag = HUN_election_HUN_conservatives }
		add_popularity = { ideology = neutrality popularity = 0.02 }
		add_to_variable = { var = HUN_representation_conservative value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_HUN_socialists } 
		add_popularity = { ideology = communism popularity = 0.02 }
		add_to_variable = { var = HUN_representation_socialist value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_HUN_independence }
		add_to_variable = { var = HUN_representation_independence value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_HUN_liberals } 
		add_popularity = { ideology = democratic popularity = 0.02 }
		add_to_variable = { var = HUN_representation_liberal value = 1 }
	}
	
	#Bohemia-Moravia
	if = {
		limit = { has_country_flag = HUN_election_BOH_conservatives }
		add_popularity = { ideology = neutrality popularity = 0.02 }
		add_to_variable = { var = HUN_representation_conservative value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_BOH_socialists } 
		add_popularity = { ideology = communism popularity = 0.02 }
		add_to_variable = { var = HUN_representation_socialist value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_BOH_independence }
		add_to_variable = { var = HUN_representation_independence value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_BOH_liberals } 
		add_popularity = { ideology = democratic popularity = 0.02 }
		add_to_variable = { var = HUN_representation_liberal value = 1 }
	}
	
	#Galicia-Lodomeria
	if = {
		limit = { has_country_flag = HUN_election_GAL_conservatives }
		add_popularity = { ideology = neutrality popularity = 0.02 }
		add_to_variable = { var = HUN_representation_conservative value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_GAL_socialists } 
		add_popularity = { ideology = communism popularity = 0.02 }
		add_to_variable = { var = HUN_representation_socialist value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_GAL_independence }
		add_to_variable = { var = HUN_representation_independence value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_GAL_liberals } 
		add_popularity = { ideology = democratic popularity = 0.02 }
		add_to_variable = { var = HUN_representation_liberal value = 1 }
	}
	
	#Transylvania
	if = {
		limit = { has_country_flag = HUN_election_TRA_conservatives }
		add_popularity = { ideology = neutrality popularity = 0.02 }
		add_to_variable = { var = HUN_representation_conservative value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_TRA_socialists } 
		add_popularity = { ideology = communism popularity = 0.02 }
		add_to_variable = { var = HUN_representation_socialist value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_TRA_independence }
		add_to_variable = { var = HUN_representation_independence value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_TRA_liberals } 
		add_popularity = { ideology = democratic popularity = 0.02 }
		add_to_variable = { var = HUN_representation_liberal value = 1 }
	}
	
	#Croatia-Bosnia
	if = {
		limit = { has_country_flag = HUN_election_CRO_conservatives }
		add_popularity = { ideology = neutrality popularity = 0.02 }
		add_to_variable = { var = HUN_representation_conservative value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_CRO_socialists } 
		add_popularity = { ideology = communism popularity = 0.02 }
		add_to_variable = { var = HUN_representation_socialist value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_CRO_independence }
		add_to_variable = { var = HUN_representation_independence value = 1 }
	}
	if = {
		limit = { has_country_flag = HUN_election_CRO_liberals } 
		add_popularity = { ideology = democratic popularity = 0.02 }
		add_to_variable = { var = HUN_representation_liberal value = 1 }
	}
}

release_autonomous_austria = {
	clr_country_flag = HUN_AUS_exists
	if = {
		limit = { AUS = { exists = yes } }
		set_country_flag = HUN_AUS_exists
	}
	every_state = {
		limit = {
			is_owned_by = HUN
			has_state_flag = AUS_INITIAL_STATE
		}
		transfer_state_to = AUS
		add_core_of = AUS
	}
	if = {
		limit = { NOT = { has_country_flag = HUN_AUS_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = AUS
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = AUS }
		}
		AUS = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = AUS_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_slovakia = {
	clr_country_flag = HUN_SLO_exists
	if = {
		limit = { SLO = { exists = yes } }
		set_country_flag = HUN_SLO_exists
	}
	every_state = {
		limit = {
			is_core_of = SLO
			is_owned_by = HUN
		}
		transfer_state_to = SLO
	}
	if = {
		limit = { NOT = { has_country_flag = HUN_SLO_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = SLO
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = SLO }
		}
		SLO = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = SLO_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_bohemia = {
	clr_country_flag = HUN_CZE_exists
	if = {
		limit = { CZE = { exists = yes } }
		set_country_flag = HUN_CZE_exists
	}
	every_state = {
		limit = {
			is_core_of = BOH
			is_core_of = MRV
			is_core_of = CSN
			is_owned_by = HUN
		}
		transfer_state_to = CZE
		add_core_of = CZE
	}
	if = {
		limit = { NOT = { has_country_flag = HUN_CZE_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = CZE
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = CZE }
		}
		CZE = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = CZE_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_ukraine = {
	clr_country_flag = HUN_UKR_exists
	if = {
		limit = { WUK = { exists = yes } }
		set_country_flag = HUN_UKR_exists
	}
	every_state = {
		limit = {
			is_core_of = WUK
			is_owned_by = HUN
		}
		transfer_state_to = WUK
	}
	if = {
		limit = { NOT = { has_country_flag = HUN_UKR_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = WUK
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = WUK }
		}
		WUK = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = UKR_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_transylvania = {
	clr_country_flag = HUN_TRA_exists
	if = {
		limit = { TRA = { exists = yes } }
		set_country_flag = HUN_TRA_exists
	}
	every_state = {
		limit = {
			is_owned_by = HUN
			OR = {
				is_core_of = TRA
				AND = {
					is_core_of = ROM
					is_core_of = BNT
				}
			}
		}
		transfer_state_to = TRA
		add_core_of = TRA
	}
	
	if = {
		limit = { NOT = { has_country_flag = HUN_TRA_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = TRA
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = TRA }
		}
		TRA = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = TRA_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_yugoslavia = {
	clr_country_flag = HUN_YUG_exists
	if = {
		limit = { YUG = { exists = yes } }
		set_country_flag = HUN_YUG_exists
	}
	#Croatia
	915 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	#Istria
	852 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Slavonia
	109 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Fiume
	914 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Pag
	924 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Zara
	163 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Dalmatia
	103 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Kotor
	736 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Bosnia
	104 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Herzegovina
	804 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	#Srem
	912 = {	
		if = { limit = { is_owned_by = HUN } }
		YUG = { transfer_state = PREV add_state_core = PREV }
	}
	
	if = {
		limit = { NOT = { has_country_flag = HUN_YUG_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = CRO
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = CRO }
		}
		CRO = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = CRO_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_italy = {
	clr_country_flag = HUN_ITA_exists
	if = {
		limit = { VNT = { exists = yes } }
		set_country_flag = HUN_ITA_exists
	}
	every_state = {
		limit = {
			is_owned_by = HUN
			OR = {
				is_core_of = VNT
				is_core_of = FRI
			}
		}
		transfer_state_to = VNT
		transfer_state_to = FRI
	}
	
	if = {
		limit = { NOT = { has_country_flag = HUN_ITA_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = VNT
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = VNT }
		}
		VNT = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = ITA_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

release_autonomous_slovenia = {
	clr_country_flag = HUN_SLV_exists
	if = {
		limit = { SLO = { exists = yes } }
		set_country_flag = HUN_SLV_exists
	}
	every_state = {
		limit = {
			is_owned_by = HUN
			is_core_of = SLV
			NOT = { state = 695 }
		}
		transfer_state_to = SLV
	}
	
	if = {
		limit = { NOT = { has_country_flag = HUN_SLV_exists } }
		if = {
			limit = { has_dlc = "Together for Victory" }
			set_autonomy = {
				target = SLV
				autonomous_state = autonomy_integrated_puppet
				freedom_level = 0.5
			}
			else = { puppet = SLV }
		}
		SLO = {
			#This cosmetic tag will make sure that the substate doesn't have any fancy names
			set_cosmetic_tag = SLV_SUBSTATE
			set_country_flag = HUN_is_substate_of_federation
			#The cosmetic tag is dropped via an event, if the country becomes independent of the federation
		}
	}
}

step_back_economy = {
	if = {
		limit = { has_idea = low_economic_mobilisation }
		add_ideas = civilian_economy
	}
	if = {
		limit = { has_idea = partial_economic_mobilisation }
		add_ideas = low_economic_mobilisation
	}
	if = {
		limit = { has_idea = war_economy }
		add_ideas = partial_economic_mobilisation
	}
	if = {
		limit = { has_idea = tot_economic_mobilisation }
		add_ideas = war_economy
	}
}

step_back_conscription = {
	if = {
		limit = { has_idea = volunteer_only }
		add_ideas = disarmed_nation
	}
	if = {
		limit = { has_idea = limited_conscription }
		add_ideas = volunteer_only
	}
	if = {
		limit = { has_idea = extensive_conscription }
		add_ideas = limited_conscription
	}
	if = {
		limit = { has_idea = service_by_requirement }
		add_ideas = extensive_conscription
	}
	if = {
		limit = { has_idea = all_adults_serve }
		add_ideas = service_by_requirement
	}
	if = {
		limit = { has_idea = scraping_the_barrel }
		add_ideas = all_adults_serve
	}
}

ask_new_trianon_police_candidate = {
	if = {
		limit = {
			ENG = {
				NOT = { tag = ROOT }
				exists = yes
				NOT = { has_country_flag = HUN_backed_out_from_treaty_of_trianon }
			}
		}
		ENG = { country_event = { id = hungary_flavor_gen.34 days = 1 } }
		else = {
			if = {
				limit = {
					FRA = {
						NOT = { tag = ROOT }
						exists = yes
						NOT = { has_country_flag = HUN_backed_out_from_treaty_of_trianon }
					}
				}
				FRA = { country_event = { id = hungary_flavor_gen.34 days = 1 } }
				else = {
					if = {
						limit = {
							USA = {
								NOT = { tag = ROOT }
								exists = yes
								NOT = { has_country_flag = HUN_backed_out_from_treaty_of_trianon }
							}
						}
						USA = { country_event = { id = hungary_flavor_gen.34 days = 1 } }
						else = {
							random_country = {
								limit = {
									is_major = yes
									NOT = { tag = ROOT }
									NOT = { has_country_flag = HUN_backed_out_from_treaty_of_trianon }
									OR = {
										# These are the rest of the countries who signed the treaty in 1920
										tag = ITA
										tag = JAP
										tag = BEL
										tag = CHI
										tag = CUB
										tag = GRE
										tag = NIC
										tag = PAN
										tag = POL
										tag = POR
										tag = ROM
										tag = YUG
										tag = SIA
										tag = CZE
									}
								}
								country_event = { id = hungary_flavor_gen.34 days = 1 }
							}
						}
					}
				}
			}
		}
	}
}

set_root_government_to_ideology = {
	if = {
		limit = { has_government = neutrality }
		ROOT = {
			set_politics = {
				ruling_party = neutrality
				elections_allowed = yes
			}
		}
	}
	if = {
		limit = { has_government = democratic }
		ROOT = {
			set_politics = {
				ruling_party = democratic
				elections_allowed = yes
			}
		}
	}
	if = {
		limit = { has_government = fascism }
		ROOT = {
			set_politics = {
				ruling_party = fascism
				elections_allowed = no
			}
		}
	}
	if = {
		limit = { has_government = communism }
		ROOT = {
			set_politics = {
				ruling_party = communism
				elections_allowed = no
			}
		}
	}
}

get_cores_on_claimed_land_HUN = {
	every_state = {
		limit = {
			has_state_flag = HUN_is_claimed_by_HUN
			NOT = { is_core_of = HUN }
		}
		add_core_of = HUN
	}
}

get_all_cores_HUN = {
	every_state = {
		limit = {
			is_core_of = HUN
			NOT = { is_owned_by = HUN }
		}
		OWNER = {
			if = {
				limit = { NOT = { has_country_flag = HUN_lost_territory_after_revision } }
				set_country_flag = HUN_lost_territory_after_revision
				add_opinion_modifier = { target = HUN modifier = HUN_lost_territory_after_war }
				add_opinion_modifier = { target = ENG modifier = HUN_lost_territory_after_war }
				add_opinion_modifier = { target = USA modifier = HUN_lost_territory_after_war }
				add_opinion_modifier = { target = SOV modifier = HUN_lost_territory_after_war }
			}
		}
		HUN = {
			transfer_state = PREV
		}
	}
}

HUN_king_on_the_throne_effects = {
	if = {
		limit = { has_idea = kingdom_without_a_king }
		remove_ideas = kingdom_without_a_king
	}
	set_country_flag = HUN_has_king
}

HUN_remove_press_lawsuits = {
	if = {
		limit = { has_idea = press_lawsuits_neutrality }
		remove_ideas = press_lawsuits_neutrality
	}
	if = {
		limit = { has_idea = press_lawsuits_communism }
		remove_ideas = press_lawsuits_communism
	}
	if = {
		limit = { has_idea = press_lawsuits_democratic }
		remove_ideas = press_lawsuits_democratic
	}
	if = {
		limit = { has_idea = press_lawsuits_fascism }
		remove_ideas = press_lawsuits_fascism
	}
}

HUN_remove_turul_movement = {
	if = {
		limit = { has_idea = turul_movement_neutrality }
		remove_ideas = turul_movement_neutrality
	}
	if = {
		limit = { has_idea = turul_movement_communism }
		remove_ideas = turul_movement_communism
	}
	if = {
		limit = { has_idea = turul_movement_democratic }
		remove_ideas = turul_movement_democratic
	}
	if = {
		limit = { has_idea = turul_movement_fascism }
		remove_ideas = turul_movement_fascism
	}
}

HUN_remove_trianon_restrictions = {
	if = {
		limit = { has_idea = trianon_restrictions }
		remove_ideas = trianon_restrictions
	}
	if = {
		limit = { has_idea = HUN_secret_rearmament }
		remove_ideas = HUN_secret_rearmament
	}
}

HUN_set_up_hungarian_state_claims = {
	if = { limit = { NOT = { 45 = { has_state_flag = HUN_claim_forbidden } } } 45 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Novi Sad
	if = { limit = { NOT = { 70 = { has_state_flag = HUN_claim_forbidden } } } 70 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Western Slovakia
	if = { limit = { NOT = { 71 = { has_state_flag = HUN_claim_forbidden } } } 71 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Eastern Slovakia
	if = { limit = { NOT = { 928 = { has_state_flag = HUN_claim_forbidden } } } 928 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Sobrance
	if = { limit = { NOT = { 73 = { has_state_flag = HUN_claim_forbidden } } } 73 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Carpathian Ruthenia
	if = { limit = { NOT = { 76 = { has_state_flag = HUN_claim_forbidden } } } 76 = { set_state_flag = HUN_is_claimed_by_HUN } }		#North Transylvania
	if = { limit = { NOT = { 929 = { has_state_flag = HUN_claim_forbidden } } } 929 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Szeklerland
	if = { limit = { NOT = { 82 = { has_state_flag = HUN_claim_forbidden } } } 82 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Banat
	if = { limit = { NOT = { 83 = { has_state_flag = HUN_claim_forbidden } } } 83 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Southern Partium
	if = { limit = { NOT = { 84 = { has_state_flag = HUN_claim_forbidden } } } 84 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Transylvania
	if = { limit = { NOT = { 109 = { has_state_flag = HUN_claim_forbidden } } } 109 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Slavonia
	if = { limit = { NOT = { 664 = { has_state_flag = HUN_claim_forbidden } } } 664 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Southern Slovakia
	if = { limit = { NOT = { 909 = { has_state_flag = HUN_claim_forbidden } } } 909 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Burgenland
	if = { limit = { NOT = { 910 = { has_state_flag = HUN_claim_forbidden } } } 910 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Torontal
	if = { limit = { NOT = { 911 = { has_state_flag = HUN_claim_forbidden } } } 911 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Srem
	if = { limit = { NOT = { 912 = { has_state_flag = HUN_claim_forbidden } } } 912 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Muraköz
	if = { limit = { NOT = { 913 = { has_state_flag = HUN_claim_forbidden } } } 913 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Fiume
	if = { limit = { NOT = { 914 = { has_state_flag = HUN_claim_forbidden } } } 914 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Beregszasz
	if = { limit = { NOT = { 914 = { has_state_flag = HUN_claim_forbidden } } } 914 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Croatia
	if = { limit = { NOT = { 802 = { has_state_flag = HUN_claim_forbidden } } } 802 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Lika
	if = { limit = { NOT = { 917 = { has_state_flag = HUN_claim_forbidden } } } 917 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Maramaros
	if = { limit = { NOT = { 918 = { has_state_flag = HUN_claim_forbidden } } } 918 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Norhtern Partium
	if = { limit = { NOT = { 923 = { has_state_flag = HUN_claim_forbidden } } } 923 = { set_state_flag = HUN_is_claimed_by_HUN } }		#Pag
}

HUN_set_up_austro_hungarian_state_claims = {
	if = { limit = { NOT = { 104 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 104 }		#Bosnia
	if = { limit = { NOT = { 804 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 804 }		#Herzegovina
	if = { limit = { NOT = { 103 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 103 }		#Dalmatia	
	if = { limit = { NOT = { 163 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 163 }		#Zara		
	if = { limit = { NOT = { 102 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 102 }		#Slovenia
	if = { limit = { NOT = { 916 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 916 }		#Ljubljana
	if = { limit = { NOT = { 852 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 852 }		#Istria
	if = { limit = { NOT = { 39 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 39 }		#South Tyrol
	if = { limit = { NOT = { 850 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 850 }		#Trentino
	if = { limit = { NOT = { 69 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 69 }		#Sudetenland
	if = { limit = { NOT = { 9 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 9 }			#Bohemia
	if = { limit = { NOT = { 75 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 75 }		#Moravia
	if = { limit = { NOT = { 74 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 74 }		#Eastern Sudetenland
	if = { limit = { NOT = { 72 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 72 }		#Zaolzie
	if = { limit = { NOT = { 88 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 88 }		#Krakow	
	if = { limit = { NOT = { 89 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 89 }		#Stanislawow
	if = { limit = { NOT = { 91 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 91 }		#Lwow		
	if = { limit = { NOT = { 80 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 80 }		#North Bucovina	
	if = { limit = { NOT = { 919 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 919 }		#Kotor	
	if = { limit = { NOT = { 736 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 736 }		#Primorska		
	if = { limit = { NOT = { 925 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 925 }		#Trieste		
	if = { limit = { NOT = { 926 = { has_state_flag = HUN_claim_forbidden } } } add_state_claim = 926 }		#South Bucovina	
}

HUN_lose_autonomy_for_territories_received = {
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 1 compare = equals } }
		add_autonomy_score = { value = -20 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 2 compare = equals } }
		add_autonomy_score = { value = -40 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 3 compare = equals } }
		add_autonomy_score = { value = -60 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 4 compare = equals } }
		add_autonomy_score = { value = -80 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 5 compare = equals } }
		add_autonomy_score = { value = -100 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 6 compare = equals } }
		add_autonomy_score = { value = -120 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 7 compare = equals } }
		add_autonomy_score = { value = -140 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 8 compare = equals } }
		add_autonomy_score = { value = -160 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 9 compare = equals } }
		add_autonomy_score = { value = -180 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 10 compare = equals } }
		add_autonomy_score = { value = -200 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 11 compare = equals } }
		add_autonomy_score = { value = -220 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 12 compare = equals } }
		add_autonomy_score = { value = -240 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 13 compare = equals } }
		add_autonomy_score = { value = -260 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 14 compare = equals } }
		add_autonomy_score = { value = -280 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 15 compare = equals } }
		add_autonomy_score = { value = -300 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 16 compare = equals } }
		add_autonomy_score = { value = -320 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 17 compare = equals } }
		add_autonomy_score = { value = -340 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 18 compare = equals } }
		add_autonomy_score = { value = -360 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 19 compare = equals } }
		add_autonomy_score = { value = -380 localization = HUN_returned_territory }
	}
	if = {
		limit = { check_variable = { var = global.HUN_territories_transferred value = 20 compare = greater_than_or_equals } }
		add_autonomy_score = { value = -400 localization = HUN_returned_territory }
	}
}

#Apply this effect on state scope
apply_hungarian_integration_modifier = {
	hidden_effect = {
		remove_dynamic_modifier = { modifier = hungarian_integration_neutral }
		remove_dynamic_modifier = { modifier = hungarian_integration_more_harsh }
		remove_dynamic_modifier = { modifier = hungarian_integration_harsh }
		remove_dynamic_modifier = { modifier = hungarian_integration_more_lenient }
		remove_dynamic_modifier = { modifier = hungarian_integration_lenient }
	}
	if = {
		# Harsh 2
		limit = { ROOT = { has_completed_focus = HUN_hungarization } }
		add_dynamic_modifier = { modifier = hungarian_integration_more_harsh }
		
		if = {
			# Harsh 1
			limit = { ROOT = { has_completed_focus = HUN_suppression_focus } }
			add_dynamic_modifier = { modifier = hungarian_integration_harsh }
			
			if = {
				# Lenient 2
				limit = { ROOT = { has_completed_focus = HUN_minority_rights } }
				add_dynamic_modifier = { modifier = hungarian_integration_more_lenient }
						
				if = {
					# Lenient 1
					limit = { ROOT = { has_completed_focus = HUN_integration_focus } }
					add_dynamic_modifier = { modifier = hungarian_integration_lenient }
								
					if = {
						# Neutral
						add_dynamic_modifier = { modifier = hungarian_integration_neutral }
					}
				}
			}
		}
	}
}

integrate_croatia = {
	102 = {		#North Slovenia
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			 OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	853 = {		#Ljubljana
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	736 = {		#Litorale
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
			}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	109 = {		#Slavonia
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	915 = {		#Croatia
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	921 = {		#Lika
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	852 = {		#Istria
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	913 = {		#Fiume
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	923 = {		#Pag
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	163 = {		#Zara
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	103 = {		#Dalmatia
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	919 = {		#Kotor
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	910 = {		#PTorontal
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
			custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
		}
	}
	911 = {		#Srem
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
			custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
		}
	}
}

integrate_bohemia = {
	9 = {		#Bohemia
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	75 = {		#Moravia
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	74 = {		#Eastern Sudetenland
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	69 = {		#Sudetenland
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	72 = {		#Zaolzie
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
}

integrate_galicia = {
	88 = {		#Krakow
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	89 = {		#Stanislawow
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
	91 = {		#Lwow
		if = {
			limit = { NOT = { is_core_of = ROOT } }
			add_core_of = ROOT
		}
		if = {
			limit = { has_state_flag = HUN_is_being_integrated }
			OWNER = { remove_05_conscription_resistance = yes }
			clr_state_flag = HUN_is_being_integrated
		}
		custom_effect_tooltip = linebreak	#Linebreak, because paradox forgot to put linebreaks after some effect tooltips
	}
}

########  ##          ###    ##    ## ########    ######## ######## ##     ## ########  ##          ###    ######## ########  ######
##     ## ##         ## ##   ###   ## ##             ##    ##       ###   ### ##     ## ##         ## ##      ##    ##       ##    ##
##     ## ##        ##   ##  ####  ## ##             ##    ##       #### #### ##     ## ##        ##   ##     ##    ##       ##
########  ##       ##     ## ## ## ## ######         ##    ######   ## ### ## ########  ##       ##     ##    ##    ######    ######
##        ##       ######### ##  #### ##             ##    ##       ##     ## ##        ##       #########    ##    ##             ##
##        ##       ##     ## ##   ### ##             ##    ##       ##     ## ##        ##       ##     ##    ##    ##       ##    ##
##        ######## ##     ## ##    ## ########       ##    ######## ##     ## ##        ######## ##     ##    ##    ########  ######


HUN_add_domestic_design_templates = {
	create_equipment_variant = {
		name = "WM-23"
		type = small_plane_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = heavy_mg_2x
				fixed_auxiliary_weapon_slot_1 = light_mg_2x
				engine_type_slot = engine_2_1x
			}
		icon = "GFX_HUN_fighter3_medium"
	}

	create_equipment_variant = {
		name = "WM-21 Falcon"
		type = small_plane_cas_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = bomb_locks
				fixed_auxiliary_weapon_slot_1 = recon_camera
				engine_type_slot = engine_2_1x
				special_type_slot_1 = lmg_defense_turret
			}
		icon = "GFX_HUN_cv_CAS2_medium"
	}
}

HUN_add_german_design_templates = {
	create_equipment_variant = {
		name = "He 112"
		type = small_plane_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = aircraft_cannon_1_2x
				fixed_auxiliary_weapon_slot_1 = light_mg_2x
				engine_type_slot = engine_2_1x
				special_type_slot_1 = drop_tanks
			}
		icon = "GFX_HUN_he112"
	}

	create_equipment_variant = {
		name = "Ju 87"
		type = small_plane_cas_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = bomb_locks
				fixed_auxiliary_weapon_slot_1 = light_mg_2x
				engine_type_slot = engine_2_1x
				special_type_slot_1 = lmg_defense_turret
			}
		icon = "GFX_HUN_ju87"
	}
}

HUN_add_italian_design_templates = {
	create_equipment_variant = {
		name = "Re.2000"
		type = small_plane_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = heavy_mg_2x
				engine_type_slot = engine_1_1x
			}
		icon = "GFX_HUN_fighter2_medium"
	}

	create_equipment_variant = {
		name = "Ba.201"
		type = small_plane_cas_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = bomb_locks
				fixed_auxiliary_weapon_slot_1 = heavy_mg_2x
				engine_type_slot = engine_2_1x
			}
		icon = "GFX_ITA_CAS2_medium"
	}
}

HUN_add_domestic_fighter_design_templates = {
	create_equipment_variant = {
		name = "WM-123"
		type = small_plane_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = aircraft_cannon_1_2x
				fixed_auxiliary_weapon_slot_1 = light_mg_2x
				engine_type_slot = engine_3_1x
				special_type_slot_1 = self_sealing_fuel_tanks_small
				special_type_slot_2 = drop_tanks
			}
		icon = "GFX_HUN_wm123"
	}

	create_equipment_variant = {
		name = "RMI-8 X/V"
		type = small_plane_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = aircraft_cannon_1_2x
				fixed_auxiliary_weapon_slot_1 = heavy_mg_2x
				engine_type_slot = engine_3_2x
				special_type_slot_1 = self_sealing_fuel_tanks_small
				special_type_slot_2 = drop_tanks
			}
		icon = "GFX_HUN_rmi8"
	}
}

HUN_add_german_fighter_design_templates = {
	create_equipment_variant = {
		name = "Me 109"
		type = small_plane_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = aircraft_cannon_1_2x
				fixed_auxiliary_weapon_slot_1 = aircraft_cannon_1_1x
				fixed_auxiliary_weapon_slot_2 = heavy_mg_2x
				engine_type_slot = engine_3_1x
				special_type_slot_1 = drop_tanks
			}
		icon = "GFX_HUN_me109"
	}

	create_equipment_variant = {
		name = "Me 210 Ca1"
		type = small_plane_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = aircraft_cannon_1_2x
				fixed_auxiliary_weapon_slot_1 = light_mg_2x
				fixed_auxiliary_weapon_slot_2 = bomb_locks
				engine_type_slot = engine_3_2x
				special_type_slot_1 = self_sealing_fuel_tanks_small
				special_type_slot_2 = hmg_defense_turret
			}
		icon = "GFX_HUN_heavy_fighter2_medium"
	}
}

HUN_add_italian_fighter_design_templates = {
	create_equipment_variant = {
		name = "Re.2002"
		type = small_plane_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = heavy_mg_2x
				fixed_auxiliary_weapon_slot_1 = light_mg_4x
				fixed_auxiliary_weapon_slot_2 = bomb_locks
				engine_type_slot = engine_3_1x
				special_type_slot_1 = self_sealing_fuel_tanks_small
			}
		icon = "GFX_HUN_re2002"
	}
}

HUN_add_domestic_bomber_design_templates = {
	create_equipment_variant = {
		name = "ML 10"
		type = medium_plane_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = bomb_locks
				fixed_auxiliary_weapon_slot_2 = torpedo_mounting
				special_type_slot_1 = hmg_defense_turret_2x
				special_type_slot_2 = lmg_defense_turret_2x
				engine_type_slot = engine_2_2x
			}
		icon = "GFX_HUN_tactical_bomber3_medium"
	}

	create_equipment_variant = {
		name = "RMI-1 X/H"
		type = small_plane_cas_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = small_bomb_bay
				fixed_auxiliary_weapon_slot_1 = rocket_rails
				fixed_auxiliary_weapon_slot_2 = recon_camera
				engine_type_slot = engine_3_2x
				special_type_slot_1 = fuel_tanks_small
				special_type_slot_2 = hmg_defense_turret_2x
			}
		icon = "GFX_HUN_xh1"
	}
}

HUN_add_german_bomber_design_templates = {
	create_equipment_variant = {
		name = "He 111"
		type = medium_plane_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = bomb_locks
				fixed_auxiliary_weapon_slot_2 = torpedo_mounting
				special_type_slot_1 = hmg_defense_turret_2x
				special_type_slot_2 = lmg_defense_turret_2x
				engine_type_slot = engine_2_2x
			}
		icon = "GFX_HUN_he111"
	}

	create_equipment_variant = {
		name = "Me 210 R"
		type = small_plane_cas_airframe_2
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = tank_buster_1
				fixed_auxiliary_weapon_slot_1 = rocket_rails
				fixed_auxiliary_weapon_slot_2 = bomb_locks
				engine_type_slot = engine_3_2x
				special_type_slot_1 = armor_plate_small
				special_type_slot_2 = hmg_defense_turret
			}
		icon = "GFX_HUN_CAS2_medium"
	}
}

HUN_add_italian_bomber_design_templates = {
	create_equipment_variant = {
		name = "Ca 135"
		type = medium_plane_airframe_1
		parent_version = 0
		modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = bomb_locks
				fixed_auxiliary_weapon_slot_2 = torpedo_mounting
				special_type_slot_1 = hmg_defense_turret_2x
				special_type_slot_2 = lmg_defense_turret_2x
				engine_type_slot = engine_2_2x
			}
		icon = "GFX_HUN_tactical_bomber1_medium"
	}
}


########    ###    ##    ## ##    ##    ######## ######## ##     ## ########  ##          ###    ######## ########  ######
   ##      ## ##   ###   ## ##   ##        ##    ##       ###   ### ##     ## ##         ## ##      ##    ##       ##    ##
   ##     ##   ##  ####  ## ##  ##         ##    ##       #### #### ##     ## ##        ##   ##     ##    ##       ##
   ##    ##     ## ## ## ## #####          ##    ######   ## ### ## ########  ##       ##     ##    ##    ######    ######
   ##    ######### ##  #### ##  ##         ##    ##       ##     ## ##        ##       #########    ##    ##             ##
   ##    ##     ## ##   ### ##   ##        ##    ##       ##     ## ##        ##       ##     ##    ##    ##       ##    ##
   ##    ##     ## ##    ## ##    ##       ##    ######## ##     ## ##        ######## ##     ##    ##    ########  ######



HUN_add_improved_light_tank_templates = {
    #38M Toldi I
	create_equipment_variant = {
		name = "38M Toldi I"
		type = light_tank_chassis_2
	    parent_version = 0
		modules = {
			main_armament_slot = tank_auto_cannon
			turret_type_slot = tank_light_two_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
		}
		upgrades = {
			tank_nsb_engine_upgrade = 4
			tank_nsb_armor_upgrade = 2
		}
		icon = "GFX_HUN_improved_light_tank_medium"
	}
	#40M Nimród
	create_equipment_variant = {
		name = "40M Nimród"
		type = light_tank_aa_chassis_2
		parent_version = 0
		modules = {
			main_armament_slot = tank_anti_air_cannon
			turret_type_slot = tank_light_three_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
		}
		upgrades = {
			tank_nsb_engine_upgrade = 4
			tank_nsb_armor_upgrade = 2
		}
		icon = "GFX_HUN_improved_light_spaa_medium"
	}
	#Dobó I
	create_equipment_variant = {
		name = "Dobó I"
		type = light_tank_destroyer_chassis_2
		parent_version = 0
		modules = {
			main_armament_slot = tank_high_velocity_cannon_2
			turret_type_slot = tank_light_fixed_superstructure_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_2
		}
		upgrades = {
			tank_nsb_engine_upgrade = 4
			tank_nsb_armor_upgrade = 2
		}
		icon = "GFX_HUN_basic_light_td_medium"
	}
}

HUN_add_advanced_light_tank_templates = {
	#43M Toldi III
	create_equipment_variant = {
		name = "43M Toldi III"
		type = light_tank_chassis_3
		parent_version = 0
		modules = {
			main_armament_slot = tank_small_cannon_2
			turret_type_slot = tank_light_two_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_welded_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
			special_type_slot_2 = armor_skirts
		}
		upgrades = {
			tank_nsb_engine_upgrade = 7
			tank_nsb_armor_upgrade = 4
		}
		icon = "GFX_HUN_advanced_light_tank_medium"
	}
}

HUN_add_improved_medium_tank_templates = {
	#41M Turán II
	create_equipment_variant = {
		name = "41M Turán II"
		type = medium_tank_chassis_2
		parent_version = 0
		modules = {
			main_armament_slot = tank_small_cannon_2
			turret_type_slot = tank_medium_three_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
			special_type_slot_2 = smoke_launchers
			special_type_slot_3 = armor_skirts
		}
		upgrades = {
			tank_nsb_engine_upgrade = 6
			tank_nsb_armor_upgrade = 4
		}
		icon = "GFX_HUN_improved_medium_tank_medium"
	}
}

HUN_add_advanced_medium_tank_templates = {
	#43M Turán III
	create_equipment_variant = {
		name = "43M Turán III"
		type = medium_tank_chassis_3
		parent_version = 0
		modules = {
			main_armament_slot = tank_high_velocity_cannon_2
			turret_type_slot = tank_medium_three_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
			special_type_slot_2 = smoke_launchers
			special_type_slot_3 = armor_skirts
		}
		upgrades = {
			tank_nsb_engine_upgrade = 7
			tank_nsb_armor_upgrade = 7
		}
		icon = "GFX_HUN_improved_medium_tank_medium"
	}
}

HUN_add_improved_heavy_tank_templates = {
	#43M TAS
	create_equipment_variant = {
		name = "43M TAS"
		type = heavy_tank_chassis_2
		parent_version = 0
		modules = {
			main_armament_slot = tank_high_velocity_cannon_2
			turret_type_slot = tank_heavy_three_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_welded_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
			special_type_slot_2 = sloped_armor
			special_type_slot_3 = smoke_launchers
		}
		upgrades = {
			tank_nsb_engine_upgrade = 10
			tank_nsb_armor_upgrade = 8
		}
		icon = "GFX_HUN_improved_heavy_tank_medium"
	}
}

HUN_add_advanced_heavy_tank_templates = {
	#44M Tas
	create_equipment_variant = {
		name = "44M Tas"
		type = heavy_tank_chassis_3
		parent_version = 0
		modules = {
			main_armament_slot = tank_high_velocity_cannon_3
			turret_type_slot = tank_heavy_three_man_tank_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_welded_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
			special_type_slot_2 = sloped_armor
			special_type_slot_3 = smoke_launchers
		}
		upgrades = {
			tank_nsb_engine_upgrade = 10
			tank_nsb_armor_upgrade = 8
		}
		icon = "GFX_HUN_advanced_heavy_tank_medium"
	}
	#44M Tas Rohamlöveg
	create_equipment_variant = {
		name = "44M Tas Rohamlöveg"
		type = heavy_tank_destroyer_chassis_3
		parent_version = 0
		modules = {
			main_armament_slot = tank_heavy_cannon
			turret_type_slot = tank_heavy_fixed_superstructure_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_welded_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
			special_type_slot_2 = sloped_armor
			special_type_slot_3 = smoke_launchers
		}
		upgrades = {
			tank_nsb_engine_upgrade = 10
			tank_nsb_armor_upgrade = 8
		}
		icon = "GFX_HUN_advanced_heavy_td_medium"
	}
}

HUN_add_medium_tank_destroyer_templates = {
    #44M Zrínyi I
	create_equipment_variant = {
		name = "44M Zrínyi I"
		type = medium_tank_destroyer_chassis_2
		parent_version = 0
		modules = {
			main_armament_slot = tank_high_velocity_cannon_2
			turret_type_slot = tank_medium_fixed_superstructure_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
		}
		upgrades = {
			tank_nsb_engine_upgrade = 6
			tank_nsb_armor_upgrade = 8
		}
		icon = "GFX_HUN_improved_medium_td_medium"
	}
    #40/43M Zrínyi II
	create_equipment_variant = {
		name = "40/43M Zrínyi II"
		type = medium_tank_artillery_chassis_2
		parent_version = 0
		modules = {
			main_armament_slot = tank_medium_howitzer
			turret_type_slot = tank_medium_fixed_superstructure_turret
			suspension_type_slot = tank_torsion_bar_suspension
			armor_type_slot = tank_riveted_armor
			engine_type_slot = tank_gasoline_engine
			special_type_slot_1 = tank_radio_1
		}
		upgrades = {
			tank_nsb_engine_upgrade = 6
			tank_nsb_armor_upgrade = 8
		}
		icon = "GFX_HUN_improved_medium_art_medium"
	}
}